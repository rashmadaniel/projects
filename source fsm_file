module fsm (
    input clk,
    input reset,
    input in,
    output reg detected
);

    // State encoding
    parameter S0 = 2'b00,
              S1 = 2'b01,
              S2 = 2'b10,
              S3 = 2'b11;

    reg [1:0] state, next_state;

    // State transition (sequential logic)
    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= S0;
        else
            state <= next_state;
    end

    // Next-state logic
    always @(*) begin
        case (state)
            S0: next_state = (in == 1'b1) ? S1 : S0;
            S1: next_state = (in == 1'b0) ? S2 : S1;
            S2: next_state = (in == 1'b1) ? S3 : S0;
            S3: next_state = (in == 1'b1) ? S1 : S0;
            default: next_state = S0;
        endcase
    end

    // Output logic (Moore machine: depends only on state)
    always @(*) begin
        detected = (state == S3) ? 1'b1 : 1'b0;
    end

endmodule
